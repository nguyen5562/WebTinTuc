using MailKit.Net.Smtp;
using MimeKit;
using System.Text;

namespace WebTinTuc.Services
{
    public class EmailService
    {
        private readonly IConfiguration _configuration;
        private readonly ILogger<EmailService> _logger;

        public EmailService(IConfiguration configuration, ILogger<EmailService> logger)
        {
            _configuration = configuration;
            _logger = logger;
        }

        public async Task<bool> SendEmailConfirmationAsync(string toEmail, string userName, string confirmationToken, int userId)
        {
            try
            {
                var smtpHost = _configuration["EmailSettings:SmtpHost"] ?? "smtp.gmail.com";
                var smtpPort = int.Parse(_configuration["EmailSettings:SmtpPort"] ?? "587");
                var smtpUsername = _configuration["EmailSettings:SmtpUsername"] ?? "";
                var smtpPassword = _configuration["EmailSettings:SmtpPassword"] ?? "";
                var fromEmail = _configuration["EmailSettings:FromEmail"] ?? "";
                var fromName = _configuration["EmailSettings:FromName"] ?? "Web Tin T·ª©c";

                var message = new MimeMessage();
                message.From.Add(new MailboxAddress(fromName, fromEmail));
                message.To.Add(new MailboxAddress(userName, toEmail));
                message.Subject = "X√°c nh·∫≠n t√†i kho·∫£n T√°c gi·∫£ - Web Tin T·ª©c";

                // T·∫°o link x√°c nh·∫≠n
                var baseUrl = _configuration["BaseUrl"] ?? "https://localhost:7104";
                var confirmationUrl = $"{baseUrl}/Account/ConfirmEmail?userId={userId}&token={confirmationToken}";

                var bodyBuilder = new BodyBuilder();
                bodyBuilder.HtmlBody = CreateEmailTemplate(userName, confirmationUrl);

                message.Body = bodyBuilder.ToMessageBody();

                using (var client = new SmtpClient())
                {
                    await client.ConnectAsync(smtpHost, smtpPort, MailKit.Security.SecureSocketOptions.StartTls);
                    await client.AuthenticateAsync(smtpUsername, smtpPassword);
                    await client.SendAsync(message);
                    await client.DisconnectAsync(true);
                }

                _logger.LogInformation("Email x√°c nh·∫≠n ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn {Email}", toEmail);
                return true;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L·ªói khi g·ª≠i email x√°c nh·∫≠n ƒë·∫øn {Email}", toEmail);
                return false;
            }
        }

        private string CreateEmailTemplate(string userName, string confirmationUrl)
        {
            return $@"
<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8'>
    <meta name='viewport' content='width=device-width, initial-scale=1.0'>
    <title>X√°c nh·∫≠n t√†i kho·∫£n T√°c gi·∫£</title>
    <style>
        body {{
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
        }}
        .header {{
            background: linear-gradient(135deg, #007bff, #0056b3);
            color: white;
            padding: 30px;
            text-align: center;
            border-radius: 10px 10px 0 0;
        }}
        .content {{
            background: #f8f9fa;
            padding: 30px;
            border-radius: 0 0 10px 10px;
        }}
        .btn {{
            display: inline-block;
            background: #28a745;
            color: white;
            padding: 15px 30px;
            text-decoration: none;
            border-radius: 5px;
            font-weight: bold;
            margin: 20px 0;
        }}
        .btn:hover {{
            background: #218838;
        }}
        .rules {{
            background: #e3f2fd;
            padding: 20px;
            border-left: 4px solid #2196f3;
            margin: 20px 0;
        }}
        .footer {{
            text-align: center;
            margin-top: 30px;
            color: #666;
            font-size: 14px;
        }}
    </style>
</head>
<body>
    <div class='header'>
        <h1>üéâ Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Web Tin T·ª©c!</h1>
        <p>X√°c nh·∫≠n t√†i kho·∫£n T√°c gi·∫£ c·ªßa b·∫°n</p>
    </div>
    
    <div class='content'>
        <h2>Xin ch√†o {userName}!</h2>
        
        <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω l√†m <strong>T√°c gi·∫£</strong> t·∫°i Web Tin T·ª©c. ƒê·ªÉ ho√†n t·∫•t qu√° tr√¨nh ƒëƒÉng k√Ω v√† k√≠ch ho·∫°t t√†i kho·∫£n, vui l√≤ng nh·∫•n v√†o n√∫t b√™n d∆∞·ªõi:</p>
        
        <div style='text-align: center;'>
            <a href='{confirmationUrl}' class='btn'>‚úÖ X√°c nh·∫≠n Email & K√≠ch ho·∫°t t√†i kho·∫£n</a>
        </div>
        
        <div class='rules'>
            <h3>üìã Quy ƒë·ªãnh d√†nh cho T√°c gi·∫£:</h3>
            <ul>
                <li>‚úÖ Tu√¢n th·ªß quy ƒë·ªãnh vi·∫øt b√†i v√† ch·ªãu tr√°ch nhi·ªám v·ªÅ n·ªôi dung b√†i vi·∫øt</li>
                <li>‚úÖ Kh√¥ng ƒëƒÉng n·ªôi dung vi ph·∫°m ph√°p lu·∫≠t ho·∫∑c kh√¥ng ph√π h·ª£p</li>
                <li>‚úÖ T√¥n tr·ªçng quy·ªÅn t√°c gi·∫£ v√† b·∫£n quy·ªÅn</li>
                <li>‚úÖ Ch·ªãu tr√°ch nhi·ªám v·ªÅ t√≠nh ch√≠nh x√°c c·ªßa th√¥ng tin</li>
                <li>‚úÖ Vi·∫øt b√†i c√≥ ch·∫•t l∆∞·ª£ng, h·ªØu √≠ch cho ƒë·ªôc gi·∫£</li>
            </ul>
        </div>
        
        <p><strong>L∆∞u √Ω:</strong> Link x√°c nh·∫≠n n√†y s·∫Ω h·∫øt h·∫°n sau 24 gi·ªù. N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán x√°c nh·∫≠n trong th·ªùi gian n√†y, vui l√≤ng ƒëƒÉng k√Ω l·∫°i.</p>
        
        <p>N·∫øu b·∫°n kh√¥ng ƒëƒÉng k√Ω t√†i kho·∫£n n√†y, vui l√≤ng b·ªè qua email n√†y.</p>
    </div>
    
    <div class='footer'>
        <p>¬© 2024 Web Tin T·ª©c. T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</p>
        <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi.</p>
    </div>
</body>
</html>";
        }
    }
}
