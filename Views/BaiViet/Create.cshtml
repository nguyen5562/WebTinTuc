@{
    ViewData["Title"] = "Viết bài mới";
    var chuDes = ViewBag.ChuDes as List<WebTinTuc.Models.ChuDe>;
    var trangThai = ViewBag.TrangThai as List<WebTinTuc.Models.TrangThaiBaiViet>;
}

<div class="container-fluid py-4" style="background: linear-gradient(135deg, var(--gray-50), var(--white));">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <!-- Header -->
                <div class="text-center mb-5">
                    <div class="mb-3">
                        <div class="rounded-circle bg-primary d-inline-flex align-items-center justify-content-center shadow-sm" style="width: 80px; height: 80px;">
                            <i class="fas fa-edit fa-2x text-white"></i>
                        </div>
                    </div>
                    <h1 class="display-6 fw-bold text-gradient mb-2">Viết bài mới</h1>
                    <p class="lead text-muted">Tạo bài viết mới với trình soạn thảo hiện đại</p>
                    
                    <div class="d-flex justify-content-center gap-3 mt-4">
                        <button type="button" class="btn btn-outline-primary hover-lift" id="previewBtn">
                            <i class="fas fa-eye me-2"></i>Xem trước
                        </button>
                    </div>
                </div>

                <!-- Form viết bài -->
                <form id="createArticleForm">
                    @Html.AntiForgeryToken()
                    
                    <div class="row">
                        <!-- Cột chính -->
                        <div class="col-lg-8">
                            <!-- Thông tin cơ bản -->
                            <div class="card border-0 shadow-sm mb-4 hover-lift">
                                <div class="card-header gradient-bg text-white border-0 py-3">
                                    <h5 class="mb-0 fw-600">
                                        <i class="fas fa-info-circle me-2"></i>Thông tin cơ bản
                                    </h5>
                                </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <label for="tieuDe" class="form-label">
                                        Tiêu đề bài viết <span class="text-danger">*</span>
                                    </label>
                                    <input type="text" class="form-control form-control-lg" id="tieuDe" name="tieuDe" 
                                           placeholder="Nhập tiêu đề bài viết..." required>
                                    <div class="invalid-feedback">Vui lòng nhập tiêu đề bài viết!</div>
                                </div>

                                <div class="mb-3">
                                    <label for="tomTat" class="form-label">Tóm tắt bài viết</label>
                                    <textarea class="form-control" id="tomTat" name="tomTat" rows="3" 
                                              placeholder="Nhập tóm tắt ngắn gọn về nội dung bài viết..."></textarea>
                                    <div class="form-text">Tóm tắt sẽ hiển thị ở trang chủ và danh sách bài viết</div>
                                </div>

                                <div class="mb-3">
                                    @await Html.PartialAsync("_ImageUpload", "", new ViewDataDictionary(ViewData) {
                                        { "FieldId", "urlanhBia" },
                                        { "FieldName", "urlanhBia" },
                                        { "Label", "URL ảnh bìa" },
                                        { "Placeholder", "https://example.com/image.jpg" },
                                        { "HelpText", "URL ảnh bìa cho bài viết (tùy chọn)" }
                                    })
                                </div>
                            </div>
                        </div>

                        <!-- Nội dung bài viết -->
                        <div class="card mb-4">
                            <div class="card-header bg-success text-white">
                                <h5 class="mb-0">
                                    <i class="fas fa-file-alt me-2"></i>Nội dung bài viết
                                </h5>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <label for="noiDung" class="form-label">
                                        Nội dung <span class="text-danger">*</span>
                                    </label>
                                    <textarea id="noiDung" name="noiDung" required></textarea>
                                    <div class="invalid-feedback">Vui lòng nhập nội dung bài viết!</div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Sidebar -->
                    <div class="col-lg-4">
                        <!-- Cài đặt xuất bản -->
                        <div class="card mb-4">
                            <div class="card-header bg-warning text-dark">
                                <h5 class="mb-0">
                                    <i class="fas fa-cog me-2"></i>Cài đặt xuất bản
                                </h5>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <label for="idchuDe" class="form-label">
                                        Chủ đề <span class="text-danger">*</span>
                                    </label>
                                    <select class="form-select" id="idchuDe" name="idchuDe" required>
                                        <option value="">-- Chọn chủ đề --</option>
                                        @if (chuDes != null)
                                        {
                                            @foreach (var chuDe in chuDes)
                                            {
                                                <option value="@chuDe.IdchuDe">@chuDe.TenChuDe</option>
                                            }
                                        }
                                    </select>
                                    <div class="invalid-feedback">Vui lòng chọn chủ đề!</div>
                                </div>

                                <!-- Trạng thái sẽ được xác định tự động dựa trên hành động -->
                                <div class="bg-info text-white p-3 rounded mb-3">
                                    <h6 class="text-white mb-2">
                                        <i class="fas fa-info-circle me-1"></i>Trạng thái bài viết
                                    </h6>
                                    <hr class="text-white">
                                    <small>
                                        • <strong>Lưu bản nháp:</strong> Bài viết sẽ được lưu dưới dạng bản nháp, bạn có thể chỉnh sửa sau<br>
                                        • <strong>Gửi chờ duyệt:</strong> Bài viết sẽ được gửi cho quản trị viên phê duyệt
                                    </small>
                                </div>

                                <!-- Đánh dấu tin nóng sẽ được quản lý bởi trang quản trị -->

                                <div class="d-grid gap-2">
                                    <button type="button" class="btn btn-success btn-lg" id="publishBtn">
                                        <i class="fas fa-paper-plane me-1"></i>Gửi chờ duyệt
                                    </button>
                                    <button type="button" class="btn btn-outline-primary" id="saveDraftBtn">
                                        <i class="fas fa-save me-1"></i>Lưu bản nháp
                                    </button>
                                </div>
                            </div>
                        </div>

                        <!-- Gợi ý viết bài -->
                        <div class="card">
                            <div class="card-header bg-info text-white">
                                <h6 class="mb-0">
                                    <i class="fas fa-lightbulb me-2"></i>Gợi ý viết bài
                                </h6>
                            </div>
                            <div class="card-body">
                                <ul class="list-unstyled mb-0">
                                    <li class="mb-2">
                                        <i class="fas fa-check text-success me-2"></i>
                                        <small>Tiêu đề hấp dẫn, dễ hiểu</small>
                                    </li>
                                    <li class="mb-2">
                                        <i class="fas fa-check text-success me-2"></i>
                                        <small>Nội dung chất lượng, có giá trị</small>
                                    </li>
                                    <li class="mb-2">
                                        <i class="fas fa-check text-success me-2"></i>
                                        <small>Sử dụng hình ảnh minh họa</small>
                                    </li>
                                    <li class="mb-2">
                                        <i class="fas fa-check text-success me-2"></i>
                                        <small>Chọn chủ đề phù hợp</small>
                                    </li>
                                    <li>
                                        <i class="fas fa-check text-success me-2"></i>
                                        <small>Kiểm tra chính tả trước khi xuất bản</small>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Modal xem trước -->
<div class="modal fade" id="previewModal" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-eye me-2"></i>Xem trước bài viết
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div id="previewContent">
                    <!-- Nội dung xem trước sẽ được load ở đây -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- TinyMCE Self-hosted -->
    <script src="https://cdn.jsdelivr.net/npm/tinymce@6.7.2/tinymce.min.js"></script>
    
    <script>
        let editor;
        
        // Khởi tạo TinyMCE
        tinymce.init({
            selector: '#noiDung',
            height: 400,
            language: 'vi',
            branding: false,
            statusbar: false,
            plugins: [
                'advlist', 'autolink', 'lists', 'link', 'image', 'charmap', 'preview',
                'anchor', 'searchreplace', 'visualblocks', 'code', 'fullscreen',
                'insertdatetime', 'media', 'table', 'help', 'wordcount', 'emoticons',
                'paste', 'textcolor', 'colorpicker', 'textpattern', 'nonbreaking',
                'pagebreak', 'save', 'directionality', 'template', 'hr', 'imagetools',
                'textcolor', 'colorpicker', 'textpattern', 'nonbreaking', 'pagebreak',
                'save', 'directionality', 'template', 'hr', 'imagetools', 'contextmenu'
            ],
            toolbar: 'undo redo | blocks | ' +
                'bold italic underline strikethrough | alignleft aligncenter ' +
                'alignright alignjustify | bullist numlist outdent indent | ' +
                'forecolor backcolor | removeformat | help | ' +
                'link image media table | charmap emoticons | ' +
                'insertdatetime | fullscreen preview code | save',
            toolbar_mode: 'sliding',
            content_style: 'body { font-family: -apple-system, BlinkMacSystemFont, San Francisco, Segoe UI, Roboto, Helvetica Neue, sans-serif; font-size: 14px; }',
            menubar: 'file edit view insert format tools table help',
            menu: {
                file: { title: 'File', items: 'newdocument restoredraft | preview | print ' },
                edit: { title: 'Edit', items: 'undo redo | cut copy paste pastetext | selectall | searchreplace' },
                view: { title: 'View', items: 'code | visualaid visualchars visualblocks | spellchecker | preview fullscreen' },
                insert: { title: 'Insert', items: 'image link media template codesample inserttable | charmap emoticons hr | pagebreak nonbreaking anchor | insertdatetime' },
                format: { title: 'Format', items: 'bold italic underline strikethrough superscript subscript codeformat | blocks fontfamily fontsize align lineheight | forecolor backcolor | removeformat' },
                tools: { title: 'Tools', items: 'spellchecker spellcheckerlanguage | code wordcount' },
                table: { title: 'Table', items: 'inserttable | cell row column | tableprops deletetable' },
                help: { title: 'Help', items: 'help' }
            },
            images_upload_handler: function (blobInfo, success, failure, progress) {
                return new Promise(function (resolve, reject) {
                    var xhr, formData;
                    xhr = new XMLHttpRequest();
                    xhr.withCredentials = false;
                    xhr.open('POST', '@Url.Action("UploadImage", "BaiViet")');
                    
                    xhr.upload.onprogress = function (e) {
                        if (e.lengthComputable) {
                            progress(e.loaded / e.total * 100);
                        }
                    };
                    
                    xhr.onload = function() {
                        var json;
                        if (xhr.status != 200) {
                            failure('HTTP Error: ' + xhr.status);
                            reject('HTTP Error: ' + xhr.status);
                            return;
                        }
                        try {
                            json = JSON.parse(xhr.responseText);
                        } catch (e) {
                            failure('Invalid JSON: ' + xhr.responseText);
                            reject('Invalid JSON: ' + xhr.responseText);
                            return;
                        }
                        if (!json || typeof json.url != 'string') {
                            failure('Invalid response: ' + xhr.responseText);
                            reject('Invalid response: ' + xhr.responseText);
                            return;
                        }
                        success(json.url);
                        resolve(json.url);
                    };
                    
                    xhr.onerror = function() {
                        failure('Network error occurred');
                        reject('Network error occurred');
                    };
                    
                    formData = new FormData();
                    formData.append('upload', blobInfo.blob(), blobInfo.filename());
                    formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);
                    
                    xhr.send(formData);
                });
            },
            // Image tools configuration
            image_advtab: true,
            image_caption: true,
            image_title: true,
            image_description: true,
            image_dimensions: true,
            image_class_list: [
                {title: 'None', value: ''},
                {title: 'Left Align', value: 'image-left'},
                {title: 'Right Align', value: 'image-right'},
                {title: 'Center Align', value: 'image-center'},
                {title: 'Full Width', value: 'image-full-width'},
                {title: 'Float Left', value: 'image-float-left'},
                {title: 'Float Right', value: 'image-float-right'}
            ],
            // Context menu for images
            contextmenu: 'link image imagetools table spellchecker configurepermanentpen',
            // Image resize handles
            image_resize: true,
            // Image upload progress
            images_upload_base_path: '/uploads/images/',
            // Custom CSS for image alignment
            content_css: [
                '//cdn.jsdelivr.net/npm/tinymce@6.7.2/skins/ui/oxide/content.min.css',
                '//cdn.jsdelivr.net/npm/tinymce@6.7.2/skins/ui/oxide/skin.min.css'
            ],
            setup: function (editor) {
                editor.on('init', function () {
                    editor.setContent('');
                });
                
                // Add custom CSS for image alignment
                editor.on('init', function() {
                    var style = editor.getDoc().createElement('style');
                    style.innerHTML = `
                        .image-left { float: left; margin: 0 10px 10px 0; }
                        .image-right { float: right; margin: 0 0 10px 10px; }
                        .image-center { display: block; margin: 10px auto; }
                        .image-full-width { width: 100%; height: auto; }
                        .image-float-left { float: left; margin: 0 10px 10px 0; }
                        .image-float-right { float: right; margin: 0 0 10px 10px; }
                    `;
                    editor.getDoc().head.appendChild(style);
                });
            }
        });

        // Function hiển thị thông báo
        function showNotification(message, type) {
            const notification = document.createElement('div');
            notification.className = `alert alert-${type === 'success' ? 'success' : 'danger'} alert-dismissible fade show position-fixed`;
            notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            notification.innerHTML = `
                <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'} me-2"></i>
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, 5000);
        }

        // Function submit form với actionType
        function submitForm(actionType) {
            if (!validateForm()) {
                return;
            }
            
            // Cập nhật textarea với nội dung từ TinyMCE trước khi tạo FormData
            tinymce.get('noiDung').save();
            
            const formData = new FormData(document.getElementById('createArticleForm'));
            formData.append('actionType', actionType);
            
            const submitBtn = document.getElementById(actionType === 'publish' ? 'publishBtn' : 'saveDraftBtn');
            const originalText = submitBtn.innerHTML;
            
            // Disable button và hiển thị loading
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Đang xử lý...';
            
            fetch('@Url.Action("Create", "BaiViet")', {
                method: 'POST',
                body: formData,
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showNotification(data.message, 'success');
                    // Đánh dấu là đã lưu
                    isSaved = true;
                    lastSavedContent = document.getElementById('tieuDe').value.trim() + '|' + tinymce.get('noiDung').getContent().trim();
                    clearDraft(); // Clear draft khi thành công
                    // Chuyển đến trang chủ
                    setTimeout(() => {
                        window.location.href = '@Url.Action("Index", "Home")';
                    }, 1500);
                } else {
                    showNotification(data.message, 'error');
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = originalText;
                }
            })
            .catch(error => {
                showNotification('Có lỗi xảy ra khi tạo bài viết!', 'error');
                submitBtn.disabled = false;
                submitBtn.innerHTML = originalText;
            });
        }

        // Xử lý nút gửi chờ duyệt
        document.getElementById('publishBtn').addEventListener('click', function() {
            // Đánh dấu đã lưu ngay khi nhấn nút
            isSaved = true;
            lastSavedContent = document.getElementById('tieuDe').value.trim() + '|' + tinymce.get('noiDung').getContent().trim();
            submitForm('publish');
        });

        // Xử lý nút lưu bản nháp
        document.getElementById('saveDraftBtn').addEventListener('click', function() {
            // Đánh dấu đã lưu ngay khi nhấn nút
            isSaved = true;
            lastSavedContent = document.getElementById('tieuDe').value.trim() + '|' + tinymce.get('noiDung').getContent().trim();
            submitForm('draft');
        });

        // Xử lý nút xem trước
        document.getElementById('previewBtn').addEventListener('click', function() {
            if (!validateForm()) {
                return;
            }
            
            const tieuDe = document.getElementById('tieuDe').value;
            const tomTat = document.getElementById('tomTat').value;
            const noiDung = tinymce.get('noiDung').getContent();
            const urlanhBia = document.getElementById('urlanhBia').value;
            
            let previewHtml = `
                <article class="preview-article">
                    <h1 class="preview-title">${tieuDe}</h1>
            `;
            
            if (urlanhBia) {
                previewHtml += `<img src="${urlanhBia}" alt="${tieuDe}" class="img-fluid mb-3 rounded">`;
            }
            
            if (tomTat) {
                previewHtml += `<div class="alert alert-light border-start border-primary border-4 mb-4">
                    <h5 class="alert-heading mb-2"><i class="fas fa-quote-left text-primary me-2"></i>Tóm tắt</h5>
                    <p class="mb-0 fst-italic">${tomTat}</p>
                </div>`;
            }
            
            previewHtml += `
                    <div class="preview-content">
                        ${noiDung}
                    </div>
                </article>
            `;
            
            document.getElementById('previewContent').innerHTML = previewHtml;
            
            const modal = new bootstrap.Modal(document.getElementById('previewModal'));
            modal.show();
        });

        // Flag để track xem user đã tương tác với form chưa
        let hasUserInteracted = false;
        
        // Validation form
        function validateForm() {
            const form = document.getElementById('createArticleForm');
            const tieuDe = document.getElementById('tieuDe').value.trim();
            const idchuDe = document.getElementById('idchuDe').value;
            const noiDung = tinymce.get('noiDung').getContent().trim();
            
            let isValid = true;
            
            // Validate tiêu đề
            if (!tieuDe || tieuDe.length < 5) {
                document.getElementById('tieuDe').classList.add('is-invalid');
                if (hasUserInteracted) {
                    showNotification('Vui lòng nhập tiêu đề bài viết!', 'error');
                }
                isValid = false;
            } else {
                document.getElementById('tieuDe').classList.remove('is-invalid');
            }
            
            // Validate chủ đề
            if (!idchuDe) {
                document.getElementById('idchuDe').classList.add('is-invalid');
                if (hasUserInteracted) {
                    showNotification('Vui lòng chọn chủ đề!', 'error');
                }
                isValid = false;
            } else {
                document.getElementById('idchuDe').classList.remove('is-invalid');
            }
            
            // Validate nội dung - kiểm tra text content thực tế, không phải HTML
            const textContent = tinymce.get('noiDung').getContent({format: 'text'}).trim();
            if (!textContent || textContent.length < 50) {
                if (hasUserInteracted) {
                    showNotification('Nội dung phải có ít nhất 50 ký tự!', 'error');
                }
                isValid = false;
            }
            
            return isValid;
        }

        // Auto-save draft (mỗi 30 giây)
        setInterval(function() {
            const tieuDe = document.getElementById('tieuDe').value.trim();
            const noiDung = tinymce.get('noiDung').getContent().trim();
            
            if (tieuDe && noiDung) {
                // Lưu vào localStorage
                const draft = {
                    tieuDe: tieuDe,
                    tomTat: document.getElementById('tomTat').value,
                    noiDung: noiDung,
                    urlanhBia: document.getElementById('urlanhBia').value,
                    idchuDe: document.getElementById('idchuDe').value,
                    timestamp: new Date().toISOString()
                };
                
                localStorage.setItem('articleDraft', JSON.stringify(draft));
            }
        }, 30000);

        // Biến để theo dõi trạng thái lưu
        let isSaved = true;
        let lastSavedContent = '';

        // Khởi tạo nội dung ban đầu khi trang load
        function initializeSaveStatus() {
            const tieuDe = document.getElementById('tieuDe').value.trim();
            const noiDung = tinymce.get('noiDung').getContent().trim();
            lastSavedContent = tieuDe + '|' + noiDung;
        }

        // Khởi tạo khi DOM ready
        document.addEventListener('DOMContentLoaded', function() {
            // Đợi TinyMCE load xong
            setTimeout(initializeSaveStatus, 1000);
        });

        // Cập nhật trạng thái khi có thay đổi
        function updateSaveStatus() {
            const tieuDe = document.getElementById('tieuDe').value.trim();
            const noiDung = tinymce.get('noiDung').getContent().trim();
            const currentContent = tieuDe + '|' + noiDung;
            
            if (currentContent !== lastSavedContent) {
                isSaved = false;
            } else {
                isSaved = true;
            }
        }

        // Lắng nghe thay đổi trong form
        document.getElementById('tieuDe').addEventListener('input', function() {
            hasUserInteracted = true;
            updateSaveStatus();
        });
        document.getElementById('tomTat').addEventListener('input', function() {
            hasUserInteracted = true;
            updateSaveStatus();
        });
        document.getElementById('urlanhBia').addEventListener('input', function() {
            hasUserInteracted = true;
            updateSaveStatus();
        });
        document.getElementById('idchuDe').addEventListener('change', function() {
            hasUserInteracted = true;
            updateSaveStatus();
        });
        
        // Lắng nghe thay đổi trong TinyMCE
        tinymce.on('AddEditor', function(e) {
            e.editor.on('change', function() {
                hasUserInteracted = true;
                updateSaveStatus();
            });
        });

        // Cảnh báo khi rời trang mà chưa lưu
        window.addEventListener('beforeunload', function(e) {
            if (!isSaved) {
                e.preventDefault();
                e.returnValue = 'Bạn có thay đổi chưa được lưu. Bạn có chắc chắn muốn rời khỏi trang?';
            }
        });

        // Load draft khi trang load
        window.addEventListener('load', function() {
            const draft = localStorage.getItem('articleDraft');
            if (draft) {
                const draftData = JSON.parse(draft);
                const draftDate = new Date(draftData.timestamp);
                const now = new Date();
                const diffHours = (now - draftDate) / (1000 * 60 * 60);
                
                if (diffHours < 24) { // Chỉ load draft trong 24h
                    if (confirm(`Tìm thấy bản nháp từ ${draftDate.toLocaleString()}. Bạn có muốn khôi phục không?`)) {
                        document.getElementById('tieuDe').value = draftData.tieuDe;
                        document.getElementById('tomTat').value = draftData.tomTat;
                        document.getElementById('urlanhBia').value = draftData.urlanhBia;
                        document.getElementById('idchuDe').value = draftData.idchuDe;
                        
                        // Set nội dung cho TinyMCE
                        if (tinymce.get('noiDung')) {
                            tinymce.get('noiDung').setContent(draftData.noiDung);
                        }
                    }
                }
            }
        });

        // Clear draft khi submit thành công
        function clearDraft() {
            localStorage.removeItem('articleDraft');
        }
    </script>
    
    <style>
        .tox-tinymce {
            border-radius: 8px;
        }
        
        .tox .tox-toolbar__primary {
            background: #f8f9fa;
        }
        
        .preview-article {
            max-width: 800px;
            margin: 0 auto;
        }
        
        .preview-title {
            color: #007bff;
            margin-bottom: 1rem;
        }
        
        .preview-content {
            line-height: 1.8;
            font-size: 16px;
        }
        
        .preview-content h1, .preview-content h2, .preview-content h3,
        .preview-content h4, .preview-content h5, .preview-content h6 {
            margin-top: 2rem;
            margin-bottom: 1rem;
            color: #333;
        }
        
        .preview-content p {
            margin-bottom: 1.5rem;
        }
        
        .preview-content img {
            max-width: 100%;
            height: auto;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            margin: 1rem 0;
        }
        
        .form-control:focus, .form-select:focus {
            border-color: #007bff;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }
        
        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }
        
        .is-invalid {
            border-color: #dc3545;
        }
        
        .invalid-feedback {
            display: none;
            width: 100%;
            margin-top: 0.25rem;
            font-size: 0.875em;
            color: #dc3545;
        }
        
        .is-invalid + .invalid-feedback {
            display: block;
        }
    </style>
}
